// BuildTrack Pro Prisma Schema
// Comprehensive schema for the Dashboard Home feature and future extensions

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Identity & Access Control Models

// User model for authentication and user management
model User {
  id             String    @id @default(uuid())
  email          String    @unique
  firstName      String
  lastName       String
  avatarUrl      String?
  passwordHash   String? // Hashed password (null for OAuth users)
  emailVerified  Boolean   @default(false)
  phoneNumber    String?
  organizationId String
  roleId         String
  isActive       Boolean   @default(true)
  lastLogin      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Enhanced Profile Fields
  // Professional Fields
  jobTitle       String?
  department     String?
  skills         Json?     @default("[]") // Array of skills as JSON
  certifications Json?     @default("[]") // Array of certifications as JSON
  
  // Communication Preferences
  preferredContactMethod String?   @default("email") // email, sms, app
  timezone              String?   @default("UTC")
  language              String?   @default("en")
  preferences           Json      @default("{}") // User preferences as JSON
  
  // User Experience Customization
  dashboardLayout       Json?     @default("{\"widgets\": [], \"layout\": \"default\"}") 
  recentProjects        Json?     @default("[]") // Array of recent project IDs
  favoriteTools         Json?     @default("[]") // Array of favorite tool IDs
  
  // Mobile-Specific Fields
  deviceTokens          Json?     @default("[]") // Array of device tokens for push notifications
  offlineAccess         Boolean?  @default(false)
  dataUsagePreferences  Json?     @default("{\"autoDownload\": false, \"highQualityImages\": false, \"videoPlayback\": \"wifi-only\"}") 
  
  // Analytics & Personalization
  lastActiveProjectId   String?
  loginStreak           Int?      @default(0)
  featureUsage          Json?     @default("{}")
  onboardingStatus      Json?     @default("{\"completed\": false, \"steps\": {\"profile\": false, \"organization\": false, \"project\": false, \"team\": false, \"tour\": false}}")

  // Relations
  organization          Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role                  Role                 @relation(fields: [roleId], references: [id])
  lastActiveProject     Project?             @relation("lastActiveProject", fields: [lastActiveProjectId], references: [id], onDelete: SetNull)
  teams                 TeamMember[]
  dashboardLayouts      DashboardLayout[]
  assignedTasks         Task[]               @relation("assignee")
  createdTasks          Task[]               @relation("creator")
  receivedNotifications Notification[]       @relation("recipient")
  sentNotifications     Notification[]       @relation("sender")
  notificationSettings  NotificationSetting?
  createdReports        Report[]

  @@index([organizationId])
  @@index([email])
}

// Organization model for company/team management
model Organization {
  id               String    @id @default(uuid())
  name             String
  slug             String    @unique
  logoUrl          String?
  isActive         Boolean   @default(true)
  subscriptionTier String    @default("free")
  subscriptionEnds DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  settings         Json      @default("{}") // Organization settings as JSON

  // Relations
  users              User[]
  projects           Project[]
  roles              Role[]
  teams              Team[]
  widgets            Widget[]
  dashboards         Dashboard[]
  dashboardLayouts   DashboardLayout[]
  notifications      Notification[]
  reports            Report[]
  metricDefinitions  MetricDefinition[]
  analyticsSnapshots AnalyticsSnapshot[]

  @@index([slug])
}

// Roles and Permissions
model Role {
  id             String   @id @default(uuid())
  name           String
  description    String?
  isSystemRole   Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String
  defaultWidgets Json     @default("[]") // Array of default widget IDs for this role

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  users        User[]
  permissions  Permission[]

  @@unique([name, organizationId])
  @@index([organizationId])
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  roles Role[]
}

model Team {
  id             String   @id @default(uuid())
  name           String
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members      TeamMember[]

  @@unique([name, organizationId])
  @@index([organizationId])
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      String   @default("member") // e.g., "lead", "member"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
}

// Dashboard Configuration Models

model Widget {
  id              String      @id @default(uuid())
  name            String
  description     String?
  widgetType      String // e.g., "project_overview", "task_list", "timeline"
  icon            String?
  defaultSize     WidgetSize  @default(NORMAL)
  minSize         WidgetSize  @default(SMALL)
  maxSize         WidgetSize?
  defaultSettings Json        @default("{}") // Default widget settings as JSON
  isSystemWidget  Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  organizationId  String?

  // Relations
  organization     Organization?     @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  dashboardWidgets DashboardWidget[]

  @@index([widgetType])
  @@index([organizationId])
}

enum WidgetSize {
  SMALL // 1x1
  NORMAL // 1x2
  LARGE // 2x2
  XLARGE // 2x3
}

model Dashboard {
  id             String   @id @default(uuid())
  name           String
  description    String?
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String

  // Relations
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  layouts          DashboardLayout[]
  dashboardMetrics DashboardMetric[]

  @@index([organizationId])
}

model DashboardLayout {
  id             String     @id @default(uuid())
  deviceType     DeviceType @default(DESKTOP)
  layoutJson     Json // Stores the grid layout configuration
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  dashboardId    String
  userId         String?
  organizationId String

  // Relations
  dashboard    Dashboard         @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  user         User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  organization Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  widgets      DashboardWidget[]

  @@unique([dashboardId, userId, deviceType])
  @@index([userId])
  @@index([dashboardId])
  @@index([organizationId])
}

enum DeviceType {
  MOBILE
  TABLET
  DESKTOP
}

model DashboardWidget {
  id                String   @id @default(uuid())
  positionX         Int
  positionY         Int
  width             Int      @default(1)
  height            Int      @default(1)
  settings          Json     @default("{}") // Widget specific settings
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  widgetId          String
  dashboardLayoutId String

  // Relations
  widget          Widget          @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  dashboardLayout DashboardLayout @relation(fields: [dashboardLayoutId], references: [id], onDelete: Cascade)

  @@unique([dashboardLayoutId, positionX, positionY])
  @@index([widgetId])
  @@index([dashboardLayoutId])
}

// Project Management Models

// Project model for construction project management
model Project {
  id             String        @id @default(uuid())
  name           String
  description    String?
  startDate      DateTime
  targetEndDate  DateTime
  actualEndDate  DateTime?
  status         ProjectStatus @default(NOT_STARTED)
  progress       Float         @default(0) // 0 to 100
  thumbnailUrl   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String

  // Relations
  organization       Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tasks              Task[]
  milestones         Milestone[]
  kpiTargets         KpiTarget[]
  analyticsSnapshots AnalyticsSnapshot[]
  activeUsers        User[]              @relation("lastActiveProject")

  @@index([organizationId])
  @@index([status])
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

model Milestone {
  id          String          @id @default(uuid())
  name        String
  description String?
  targetDate  DateTime
  actualDate  DateTime?
  status      MilestoneStatus @default(NOT_STARTED)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  projectId   String

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([targetDate])
}

enum MilestoneStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  MISSED
}

// Task model for project tasks
model Task {
  id               String       @id @default(uuid())
  title            String
  description      String?
  status           TaskStatus   @default(TO_DO)
  priority         TaskPriority @default(MEDIUM)
  dueDate          DateTime?
  estimatedHours   Float?
  actualHours      Float?
  isOnCriticalPath Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  projectId        String
  assigneeId       String?
  creatorId        String

  // Relations
  project    Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee   User?            @relation("assignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  creator    User             @relation("creator", fields: [creatorId], references: [id], onDelete: Restrict)
  dependsOn  TaskDependency[] @relation("dependent_task")
  dependents TaskDependency[] @relation("prerequisite_task")

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  BLOCKED
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model TaskDependency {
  id                 String @id @default(uuid())
  dependentTaskId    String
  prerequisiteTaskId String

  // Relations
  dependentTask    Task @relation("dependent_task", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  prerequisiteTask Task @relation("prerequisite_task", fields: [prerequisiteTaskId], references: [id], onDelete: Cascade)

  @@unique([dependentTaskId, prerequisiteTaskId])
  @@index([prerequisiteTaskId])
}

// Notification System Models

model Notification {
  id             String               @id @default(uuid())
  title          String
  message        String
  type           NotificationType     @default(SYSTEM)
  category       String? // e.g., "task", "project", "message"
  priority       NotificationPriority @default(NORMAL)
  actionLink     String? // URL or deep link for the notification
  isRead         Boolean              @default(false)
  readAt         DateTime?
  createdAt      DateTime             @default(now())
  recipientId    String
  senderId       String?
  organizationId String

  // Relations
  recipient    User         @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender       User?        @relation("sender", fields: [senderId], references: [id], onDelete: SetNull)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([recipientId])
  @@index([isRead])
  @@index([organizationId])
  @@index([type])
  @@index([priority])
}

enum NotificationType {
  TASK
  MESSAGE
  SYSTEM
  WEATHER
  ADMIN
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

model NotificationSetting {
  id                   String   @id @default(uuid())
  emailNotifications   Boolean  @default(true)
  pushNotifications    Boolean  @default(true)
  taskNotifications    Boolean  @default(true)
  messageNotifications Boolean  @default(true)
  systemNotifications  Boolean  @default(true)
  weatherNotifications Boolean  @default(true)
  adminNotifications   Boolean  @default(true)
  quietHoursStart      Int? // Hour of day (0-23)
  quietHoursEnd        Int? // Hour of day (0-23)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               String   @unique

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Authentication and token management

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Remove this relation temporarily
  // user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Remove this relation temporarily
  // user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

// Analytics & Reporting System Models

model Report {
  id             String     @id @default(uuid())
  name           String
  description    String?
  reportType     ReportType
  isTemplate     Boolean    @default(false)
  isFavorite     Boolean    @default(false)
  isPublic       Boolean    @default(false) // Visible to all org members
  thumbnailUrl   String?
  config         Json // Report configuration including layout, filters, etc.
  lastRunAt      DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  creatorId      String
  organizationId String

  // Relations
  creator          User              @relation(fields: [creatorId], references: [id], onDelete: Restrict)
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  schedules        ReportSchedule[]
  dashboardMetrics DashboardMetric[]

  @@index([organizationId])
  @@index([reportType])
  @@index([creatorId])
}

enum ReportType {
  PROJECT_PERFORMANCE
  FINANCIAL
  RESOURCE_UTILIZATION
  TASK_ANALYSIS
  TEAM_PERFORMANCE
  QUALITY_METRICS
  CUSTOM
}

model ReportSchedule {
  id             String            @id @default(uuid())
  frequency      ScheduleFrequency
  dayOfWeek      Int? // 0-6, 0 is Sunday (for WEEKLY)
  dayOfMonth     Int? // 1-31 (for MONTHLY)
  timeOfDay      Int // Hour of day (0-23)
  format         ReportFormat      @default(PDF)
  deliveryMethod DeliveryMethod    @default(EMAIL)
  recipients     Json // Array of email addresses or user IDs
  isActive       Boolean           @default(true)
  lastExecuted   DateTime?
  nextExecution  DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  reportId       String

  // Relations
  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([nextExecution])
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
}

enum ReportFormat {
  PDF
  EXCEL
  CSV
  INTERACTIVE
}

enum DeliveryMethod {
  EMAIL
  DASHBOARD
  DOWNLOAD
}

model MetricDefinition {
  id             String          @id @default(uuid())
  name           String
  description    String?
  dataSource     String // Table or data origin
  calculation    String // SQL or formula definition
  unit           String? // e.g., "hours", "%", "$"
  aggregation    AggregationType @default(SUM)
  isSystemMetric Boolean         @default(false) // Built-in vs custom
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organizationId String

  // Relations
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  dashboardMetrics DashboardMetric[]
  kpiTargets       KpiTarget[]

  @@unique([name, organizationId])
  @@index([organizationId])
}

enum AggregationType {
  SUM
  AVERAGE
  COUNT
  MIN
  MAX
  LAST
  FIRST
}

model DashboardMetric {
  id                String            @id @default(uuid())
  displayName       String
  visualizationType VisualizationType
  size              WidgetSize        @default(NORMAL) // Reusing widget size enum
  refreshInterval   Int? // Minutes, null for manual only
  chartConfig       Json // Colors, labels, etc.
  filterConfig      Json? // Any applied filters
  positionX         Int
  positionY         Int
  width             Int               @default(1)
  height            Int               @default(1)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  metricId          String
  reportId          String?
  dashboardId       String

  // Relations
  metric    MetricDefinition @relation(fields: [metricId], references: [id], onDelete: Cascade)
  report    Report?          @relation(fields: [reportId], references: [id], onDelete: SetNull)
  dashboard Dashboard        @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@unique([dashboardId, positionX, positionY])
  @@index([metricId])
  @@index([dashboardId])
}

enum VisualizationType {
  BAR_CHART
  LINE_CHART
  PIE_CHART
  AREA_CHART
  TABLE
  KPI_CARD
  GAUGE
  HEAT_MAP
  SCATTER_PLOT
  CUSTOM
}

model KpiTarget {
  id           String          @id @default(uuid())
  targetValue  Float
  minThreshold Float? // Warning threshold
  maxThreshold Float? // Success threshold
  direction    TargetDirection @default(HIGHER_BETTER)
  timePeriod   TimePeriod      @default(MONTHLY)
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  metricId     String
  projectId    String?

  // Relations
  metric  MetricDefinition @relation(fields: [metricId], references: [id], onDelete: Cascade)
  project Project?         @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@index([metricId])
  @@index([projectId])
  @@index([startDate, endDate])
}

enum TargetDirection {
  HIGHER_BETTER
  LOWER_BETTER
  TARGET_EXACT
}

enum TimePeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  PROJECT_DURATION
}

model AnalyticsSnapshot {
  id             String       @id @default(uuid())
  snapshotDate   DateTime
  data           Json // Aggregated data snapshot
  snapshotType   SnapshotType
  createdAt      DateTime     @default(now())
  organizationId String
  projectId      String?

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project      Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@index([organizationId])
  @@index([projectId])
  @@index([snapshotDate])
  @@index([snapshotType])
}

enum SnapshotType {
  DAILY_METRICS
  WEEKLY_SUMMARY
  MONTHLY_PERFORMANCE
  PROJECT_MILESTONE
}

// Other placeholders for future features that will be implemented
