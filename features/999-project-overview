# BuildTrack Pro Project Overview

## Last Updated
- Date: April 25, 2025

## Project Overview
- **Name**: BuildTrack Pro
- **Purpose**: A comprehensive construction management solution with a Dashboard for project management, an Admin Console for oversight, a Marketing Website for user acquisition, and a CMS for content management.
- **Primary Focus**:
  - Start with the **Dashboard** (Features & Workflow) for project management.
  - Use the **Admin Console** to control the Dashboard and manage subscribers.
  - Integrate the **Marketing Website** for user acquisition, managed by the **CMS**.
- **Tech Stack**: Refer to `features/tech-stack.md` for the complete technical stack, which includes Next.js, TypeScript, Supabase, and more.
- **Coding Standards**: Follow the coding preferences outlined in the Coding Standards section below.

## Project Culture and Guiding Principles
- **Prioritization**: Focus on the Dashboard first, then Admin Console for control, followed by Marketing Website and CMS integration.
- **Consistency**: Adhere strictly to the Tech Stack (see `features/tech-stack.md`) and Coding Standards to maintain a cohesive codebase.
- **User-Centric Design**: Build features with the end-user in mind, ensuring intuitive workflows (e.g., guided onboarding, customizable dashboards).
- **Scalability and Performance**: Optimize for scale and speed, using modern tools and best practices as defined in `features/tech-stack.md` (e.g., lazy loading, caching).
- **Accessibility and Inclusivity**: Follow WCAG 2.1 AA standards to ensure the platform is accessible to all users.
- **Collaboration and Transparency**: Foster collaboration through features like team communication tools and transparent reporting in the Admin Console.
- **Innovation with AI**: Leverage AI for intelligent features (e.g., predictive analytics, document processing) to enhance user experience, using AI services specified in `features/tech-stack.md`.

## Project Structure
- **Dashboard (Features & Workflow)**:
  - Core user-facing application for managing construction projects.
  - Key Features: Authentication, Dashboard Home, Project Management, Materials Management, Document Management, Financial Management, Floorplan Management, Reporting, Communication, Mobile Features, AI Features, Settings, Help, and Integrations.
- **Admin Console**:
  - Administrative interface to control the Dashboard and manage subscribers.
  - Key Features: Dashboard (executive overview, quick actions), Customer & Organization Management, Feature Management, System Performance, Data & Analytics, Marketing Tools, Financial Operations, User Administration, Content Management, Integration Management, System Configuration, Analytics, Compliance, Maintenance, and Developer Tools.
- **Marketing Website**:
  - Public-facing site for user acquisition and marketing.
  - Key Features: Homepage, Feature Pages, Industry Solutions, Resources, About Pages, Contact Pages, Conversion Tools, Mobile Experience, Technical Implementation, Internationalization, SEO, and Website Management.
- **CMS**:
  - Content Management System to manage the Marketing Website content.
  - Key Features: Architecture, Editorial Interface, Workflow, Asset Management, User Management, Localization, Integrations, Customization, Deployment, and Security.
- **Directory Structure**:
  - Group files by feature, not type (e.g., `dashboard/auth/`, `admin-console/customer-management/`).
  - Co-locate related components (e.g., `dashboard/project-management/components/`).
  - Use barrel exports (`index.ts`) for feature modules.

## Coding Standards & Preferences (Summary)
- **TypeScript**: Use TypeScript for all code; prefer interfaces, avoid `any`.
- **Component Structure**: Use functional components with hooks; colocate components in feature directories.
- **State Management**: Use Zustand for complex state, React Context for global state.
- **Naming Conventions**: PascalCase for components, camelCase for variables, UPPER_CASE for constants.
- **File Organization**: Group by feature, use barrel exports, keep files under 300 lines.
- **CSS/Styling**: Use TailwindCSS, ensure responsive design.
- **Code Quality**: Use ESLint/Prettier, no commented-out code in production, implement proper error handling.
- **Performance**: Optimize with `useMemo`, `useCallback`, lazy loading, and caching.

## Best Practices
- **Testing**: Use testing tools specified in `features/tech-stack.md` (e.g., Vitest for unit tests, Playwright for E2E, MSW for API mocking).
- **Performance**: Optimize for Core Web Vitals, use lazy loading, and implement caching as per `features/tech-stack.md`.
- **Accessibility**: Follow WCAG 2.1 AA standards, ensure a11y attributes, and support screen readers.
- **Documentation**: Maintain clear comments for complex logic, update this file as the project evolves.

## Additional Notes
- Reference this file in Windsurf prompts to ensure alignment with project goals.
- Use the Admin Console to manage Dashboard features and subscribers.
- Ensure the Marketing Website aligns with CMS content management capabilities.
- Follow the Tech Stack in `features/tech-stack.md` for all integrations and development tools.